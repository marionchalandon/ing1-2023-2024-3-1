#include "plus.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sommaires



//Fonctions
    //efface ce qui a deja ete ecrit
    void clearScreen(){
    system("cls");
}
void displayWithClear(const char *text, unsigned int seconds) {
    printf("%s", text);
    fflush(stdout);
    usleep(2 * 1000000); // Sleep for 'seconds' seconds
    printf("\r"); // Carriage return to move the cursor back to the beginning of the line
    for (int i = 0; i < strlen(text); i++) {
        putchar(' '); // Overwrite the line with spaces
    }
    printf("\r"); // Move the cursor back again
}

//menu principal
int menuPrincipal() {
    int option;

    do {
        clearScreen();

        printf("\n1.\t Regles du jeu \n");
        printf("2.\t Lancer un nouveau Jeu a partir du niveau 1 \n");
        printf("3.\t Charger une partie \n");
        printf("4.\t Mot de passe  \n");
        printf("5.\t Scores \n");
        printf("6.\t Quitter \n");
        scanf("%d", &option);
        clearScreen();
    } while (option != 1 && option != 2 && option != 3 && option != 4 && option != 5 && option != 6);
    clearScreen();
    return option;
}

//en rapport avec le score et temps
int score(){
    printf("score");

}
//les mots de passes qui menent aux niveaux
int motdepasse(){
    char mdp[7];//mdp a 7 chiffres + 0
    scanf("%6s", mdp);

    if (strcmp(mdp, "manger") == 0 || strcmp(mdp, "Manger") == 0 || strcmp(mdp, "MANGER") == 0) {

        clearScreen();
        niveau1();
    }

    else if (strcmp(mdp, "bloque") == 0 || strcmp(mdp, "Bloque") == 0 || strcmp(mdp, "BLOQUE") == 0) {

        clearScreen();
        printf("\tNIVEAU\t2\n");
    }

    else if (strcmp(mdp, "bloque") == 0 || strcmp(mdp, "Bloque") == 0 || strcmp(mdp, "BLOQUE") == 0) {

        clearScreen();

        printf("\tNIVEAU\t3\n");

    }

    else if (strcmp(mdp, "snoopy") == 0 || strcmp(mdp, "Snoopy") == 0 || strcmp(mdp, "SNOOPY") == 0) {

        clearScreen();

        printf("\tNIVEAU\t4\n");
    }
    else if (strcmp(mdp, "e") == 0 || strcmp(mdp, "E") == 0) {
        clearScreen();
        while (getchar() != '\n'); // Vider la mémoire tampon d'entrée
        return menuPrincipal();

    }
    else{
        clearScreen();
        printf("Entrer le mot de passe ou taper E pour Exit au menu principal\n");
        motdepasse();
    }
}
//Affichage des regles page 1
int regles() {

    char quitter;
    printf("Les regles de la revanche de Snoopy (1/2): \n");
    printf("1.\tRejoignez les oiseaux dans le temps imparti \n");
    printf("2.\tNe touchez pas la balle, sinon vous perdez une vie \n");
    printf("3-\tVous avez 3 vies \n");
    printf("4-\tTapez P pour mettre pause \n");
    printf("5-\tCertains blocs sont a deplacer, a pousser ou  a eviter!  \n\n");
    printf("\tLes touches : \n\n");
    printf("\t \t \t Z \n\n");
    printf("\t \t Q\t S\t D");
    printf("\n\n Tapez une touche pour afficher la page suivante\n");
    getch();
            clearScreen();

    return reglesp2();
}
//Affichage des regles page 2
int reglesp2() {

    char quitter;
    printf("Les regles de la revanche de Snoopy (2/2): \n");
    printf("\t\tInformations sur les symboles  \n");
    printf("S \t Snoopy \n");
    printf("# \t Bloc poussable 1 fois uniquement \n");
    printf("C \t Bloc cassable en appuyant sur C lorsque vous etes a cote du bloc\n");
    printf("$ \t Bloc piege, GAME OVER  \n\n");
    printf("\tLes touches : \n\n");
    printf("\t \t \t Z \n\n");
    printf("\t \t Q\t S\t D");
    printf("\n\n Tapez une touche pour revenir au menu principal\n");
    getch();
    clearScreen();

    return menuPrincipal();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//NIVEAUX
int niveau1(){
    //Affichage pour commencer niveau
        //objectif
    printf("\tNIVEAU\t1\n");
    printf("Objectif:\n");
    printf("\t Temps:\n");
    printf("\t Score:\n");
    printf("\n");

    displayWithClear("S \t Snoopy                ", 1);
    displayWithClear("# \t Bloc poussable 1 fois uniquement", 1);
    displayWithClear("C \t Bloc cassable en appuyant sur C lorsque vous etes a cote du bloc", 1);
    displayWithClear("$ \t Bloc piege, GAME OVER                                            ", 1);
    printf("\n");

    printf("Touchez A pour commencer\n");

    char start;
    while (1) {
        start = getch(); // Use getch() to get a single character
        if (start == 'a' || start == 'A') {
            break; // Exit the loop when 'A' is pressed
        }
        clearScreen();
        printf("\tNIVEAU\t1\n");
        printf("Objectif:\n");
        printf("\t Temps:\n");
        printf("\t Score:\n");
        printf("\n"); 

        displayWithClear("S \t Snoopy                ", 1);
        displayWithClear("# \t Bloc poussable 1 fois uniquement", 1);
        displayWithClear("C \t Bloc cassable en appuyant sur C lorsque vous etes a cote du bloc", 1);
        displayWithClear("$ \t Bloc piege, GAME OVER                                            ", 1);
        printf("\n"); // Add a newline to move to the next line

        printf("Touchez A pour commencer\n");
    }

    clearScreen();

//initialisation

    system("cls");//pour que la tableau se mette a jour automatiquement
    int largeur = 20;
    int hauteur = 10;
    char cadre[hauteur][largeur];
    int positionY = 5; // Position initiale X du pion (lignes)
    int positionX = 10; // Position initiale Y du pion (colonnes)
    int vCount = 4; // Nombre de 'V' restants
    int blocPousseY = -1; // Variables pour suivre la direction de poussée
    int blocPousseX = -1;
    bool blocsPousses[hauteur][largeur];


    // Remplir le tableau et faire le cadre de X
    for (int i = 0; i < hauteur; i++) {
        for (int j = 0; j < largeur; j++) {
            if (j == 0 || j == largeur - 1) {
                cadre[i][j] = 'X';
            } else if (i == 0 || i == hauteur - 1) {
                cadre[i][j] = 'X';
            } else {
                cadre[i][j] = ' ';
            }
            // Ajout des 'V' à chaque coin du cadre à l'intérieur
            if ((i == 1 && (j == 1 || j == largeur - 2)) || (i == hauteur - 2 && (j == 1 || j == largeur - 2))) {
                cadre[i][j] = 'V';
            }
        }
    }

    for (int i = 0; i < hauteur; i++) { //initialisé les blocs non poussés
        for (int j = 0; j < largeur; j++) {
            blocsPousses[i][j] = false;
        }
    }


    // Placer le pion au centre du tableau
    cadre[positionY][positionX] = 'S';
    cadre[5][9] = '#'; //affichage des blocs poussables autour de snoopy
    cadre[5][11] = '#';
    cadre[4][10] = '#';
    cadre[6][10] = '#';

    cadre [2][1] ='C'; //affichage des blocs cassable
    cadre [1][2] ='C';

    cadre [7][2]='$'; //affichage des blocs piégés
    cadre [6][2]= '$';
    cadre [7][3]='$';

    while (1) {

        system("cls"); // Effacer l'écran avec la bibliotheque windows

        // Afficher le tableau car boucle
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                printf("%c", cadre[i][j]);
            }
            printf("\n");
        }
        int a;
        printf("Deplacez le pion avec les fleches, q (revenir au menu principal): ");
        printf("%d", a);
        a = getch();

        // Effacer la position actuelle du pion
        cadre[positionY][positionX] = ' ';

        // Mettre à jour la position du pion en fonction du déplacement
        if (a == 72 && positionY > 1 && !blocsPousses[positionY - 1][positionX] && cadre[positionY - 1][positionX] != 'C') { //fleche du haut et on blinde pour pas sortir du cadre
            if (cadre[positionY - 1][positionX] == '$') {
                system("cls");
                printf("Game over\n");
                break;
            }
            positionY--;
            blocPousseY = -1; // Pousse vers le haut
            blocPousseX = 0;
        } else if (a == 80 && positionY < hauteur - 2 && !blocsPousses[positionY + 1][positionX] && cadre[positionY + 1][positionX] != 'C') { //fleche du bas et on blinde pour pas sortir du cadre
            if (cadre[positionY + 1][positionX] == '$') {
                system("cls");
                printf("Game over\n");
                break;
            }
            positionY++;
            blocPousseY = 1; // Pousse vers le bas
            blocPousseX = 0;
        } else if (a == 75 && positionX > 1 && !blocsPousses[positionY][positionX - 1] && cadre[positionY][positionX - 1] != 'C') { //fleche de gauche et on blinde pour pas sortir du cadre
            if (cadre[positionY][positionX-1] == '$') {
                system("cls");
                printf("Game over\n");
                break;
            }
            positionX--;
            blocPousseY = 0;
            blocPousseX = -1; // Pousse vers la gauche
        } else if (a == 77 && positionX < largeur - 2 && !blocsPousses[positionY][positionX + 1] && cadre[positionY][positionX + 1] != 'C') { //fleche de droite et on blinde pour pas sortir du cadre
            if (cadre[positionY][positionX+1] == '$') {
                system("cls");
                printf("Game over\n");
                break;
            }
            positionX++;
            blocPousseY = 0;
            blocPousseX = 1; // Pousse vers la droite
        } else if (a == 'q') {
            break; // Quitter le programme si 'q' est appuyé


        }else if (a == 'c') {// Si la touche "c" est pressée
            // Vérifiez si le pion est sur une case adjacente à un bloc "C"
            if ((positionY > 1 && cadre[positionY - 1][positionX] == 'C') ||
                (positionY < hauteur - 2 && cadre[positionY + 1][positionX] == 'C') ||
                (positionX > 1 && cadre[positionY][positionX - 1] == 'C') ||
                (positionX < largeur - 2 && cadre[positionY][positionX + 1] == 'C')) {


                // Vérifiez et supprimez les blocs "C" adjacents
                if (positionY > 1 && cadre[positionY - 1][positionX] == 'C') {
                    cadre[positionY - 1][positionX] = ' ';
                }
                if (positionY < hauteur - 2 && cadre[positionY + 1][positionX] == 'C') {
                    cadre[positionY + 1][positionX] = ' ';
                }
                if (positionX > 1 && cadre[positionY][positionX - 1] == 'C') {
                    cadre[positionY][positionX - 1] = ' ';
                }
                if (positionX < largeur - 2 && cadre[positionY][positionX + 1] == 'C') {
                    cadre[positionY][positionX + 1] = ' ';
                }
            }
        }



        if (cadre[positionY][positionX] == '#' && !blocsPousses[positionY][positionX] && cadre[positionY + blocPousseY][positionX + blocPousseX] == ' ') {
            cadre[positionY + blocPousseY][positionX + blocPousseX] = '#';
            blocsPousses[positionY + blocPousseY][positionX + blocPousseX] = true;
            cadre[positionY][positionX] = ' ';
        }


        if (cadre[positionY][positionX] == 'V') {
            cadre[positionY][positionX] = ' ';
            vCount--;
            if (vCount == 0) {
                system("cls"); // Effacer l'écran
                printf("Bravo ! Niveau réussi\n");
                break;
            }
        }

        // Mettre à jour la position du pion sur le tableau
        cadre[positionY][positionX] = 'S';


    }
    printf("Appuyez sur une touche pour quitter le jeu...\n");
    getch(); // Attendre que l'utilisateur appuie sur une touche pour quitter


    return menuPrincipal();
    }







/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Main



int main() {
    //Affichage de début
    printf("\x1b[1m \n"); // Activer le texte en gras

    printf("\t LA REVANCHE DE SNOOPY \n\n");
    sleep(2);
    printf("\x1b[0m \n"); // Rétablir la mise en forme par défaut

    clearScreen();



while (1){
 int option=menuPrincipal();
    switch (option) {
        case 1:
            regles();

            break;


        case 2:
            niveau1();
            break;


        case 3:
            printf("Choisir quelle sauvegarde utiliser\n");
            break;


        case 4:
            printf("Entrer le mot de passe\n");
            motdepasse();
            break;


        case 5:
            printf("Votre hi-score est de %d\n",score);
            break;


        case 6:
            clearScreen();
            break;


        default:
            clearScreen();
            menuPrincipal();
            break;
}while (getchar() != '\n');
}}
